// Generated by gencpp from file rto_local_move/LocalMoveGoal.msg
// DO NOT EDIT!


#ifndef RTO_LOCAL_MOVE_MESSAGE_LOCALMOVEGOAL_H
#define RTO_LOCAL_MOVE_MESSAGE_LOCALMOVEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rto_local_move
{
template <class ContainerAllocator>
struct LocalMoveGoal_
{
  typedef LocalMoveGoal_<ContainerAllocator> Type;

  LocalMoveGoal_()
    : move_x(0.0)
    , move_y(0.0)
    , rotation(0.0)
    , ignore_rotation(false)  {
    }
  LocalMoveGoal_(const ContainerAllocator& _alloc)
    : move_x(0.0)
    , move_y(0.0)
    , rotation(0.0)
    , ignore_rotation(false)  {
  (void)_alloc;
    }



   typedef float _move_x_type;
  _move_x_type move_x;

   typedef float _move_y_type;
  _move_y_type move_y;

   typedef float _rotation_type;
  _rotation_type rotation;

   typedef uint8_t _ignore_rotation_type;
  _ignore_rotation_type ignore_rotation;





  typedef boost::shared_ptr< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LocalMoveGoal_

typedef ::rto_local_move::LocalMoveGoal_<std::allocator<void> > LocalMoveGoal;

typedef boost::shared_ptr< ::rto_local_move::LocalMoveGoal > LocalMoveGoalPtr;
typedef boost::shared_ptr< ::rto_local_move::LocalMoveGoal const> LocalMoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rto_local_move::LocalMoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rto_local_move::LocalMoveGoal_<ContainerAllocator1> & lhs, const ::rto_local_move::LocalMoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.move_x == rhs.move_x &&
    lhs.move_y == rhs.move_y &&
    lhs.rotation == rhs.rotation &&
    lhs.ignore_rotation == rhs.ignore_rotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rto_local_move::LocalMoveGoal_<ContainerAllocator1> & lhs, const ::rto_local_move::LocalMoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rto_local_move

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "366637325822a34a6134906628e5673b";
  }

  static const char* value(const ::rto_local_move::LocalMoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x366637325822a34aULL;
  static const uint64_t static_value2 = 0x6134906628e5673bULL;
};

template<class ContainerAllocator>
struct DataType< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rto_local_move/LocalMoveGoal";
  }

  static const char* value(const ::rto_local_move::LocalMoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"float32 move_x		# in meters\n"
"float32 move_y		# in meters\n"
"float32 rotation	# in rad\n"
"bool ignore_rotation #if true robot is not rotated after moving. if false robot is rotated \"rotation\" relative to the starting orientation\n"
;
  }

  static const char* value(const ::rto_local_move::LocalMoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_x);
      stream.next(m.move_y);
      stream.next(m.rotation);
      stream.next(m.ignore_rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalMoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rto_local_move::LocalMoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rto_local_move::LocalMoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "move_x: ";
    Printer<float>::stream(s, indent + "  ", v.move_x);
    s << indent << "move_y: ";
    Printer<float>::stream(s, indent + "  ", v.move_y);
    s << indent << "rotation: ";
    Printer<float>::stream(s, indent + "  ", v.rotation);
    s << indent << "ignore_rotation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_rotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RTO_LOCAL_MOVE_MESSAGE_LOCALMOVEGOAL_H
